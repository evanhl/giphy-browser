{"version":3,"sources":["GiphyApi.ts","GifDetail.tsx","ThumbnailList.tsx","GiphyBrowser.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["URL_ROOT","API_KEY","getParamsForFetch","page","limit","offset","rating","lang","api_key","fetchTrending","window","fetch","withQuery","fetchSearch","q","GifDetail","props","state","isLoaded","item","this","title","src","images","original","url","id","match","params","gifId","then","res","json","result","setState","data","React","Component","withRouter","ThumbnailList","className","items","map","to","onClick","viewThumbnail","fixed_height","width","height","alt","evt","console","log","GiphyBrowser","isLastPage","qChanged","bind","fetchMoreData","fetchData","debounce","type","value","onChange","placeholder","dataLength","length","next","hasMore","loader","target","pagination","count","total_count","concat","App","component","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f316f37.chunk.js","sourcesContent":["import withQuery from 'with-query';\n\nconst URL_ROOT = 'https://api.giphy.com/v1/gifs';\nconst API_KEY = 'bSPxkV28XtgbNGdLBO097zYUHnIjmOOw';\nconst PAGE_SIZE = 25;\n\nconst getParamsForFetch = function(page: number) {\n    return {\n        limit: PAGE_SIZE,\n        offset: PAGE_SIZE * page,\n        rating: 'g',\n        lang: 'en',\n        api_key: API_KEY\n    }\n}\n\nexport const fetchTrending = function(page: number) {\n    return window.fetch(withQuery(`${URL_ROOT}/trending`, {\n        ...getParamsForFetch(page)\n    }));\n}\n\nexport const fetchSearch = function(page: number, q: string): Promise<Response> {\n    return window.fetch(withQuery(`${URL_ROOT}/search`, {\n        q,\n        ...getParamsForFetch(page)\n    }));\n}\n\nexport const fetchGifById = function(id: string) {\n    return window.fetch(withQuery(`${URL_ROOT}/${id}`, {\n        api_key: API_KEY\n    }));\n}","import React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { fetchGifById } from './GiphyApi';\n\ntype GifDetailState = {\n    isLoaded: boolean,\n    item: any\n};\n\ntype GifDetailParams = {\n    gifId: string\n}\n\nclass GifDetail extends React.Component<RouteComponentProps<GifDetailParams>, GifDetailState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            isLoaded: false,\n            item: null\n        };\n    }\n\n    render() {\n        if (this.state.isLoaded) {\n            return (\n                <div>\n                    <h1>{this.state.item.title}</h1>\n                    <img src={this.state.item.images.original.url}></img>\n                </div>\n            );\n        } else {\n            // Assume loading state for now since we're not handling error states\n            return (\n                <div>\n                    <h1>Loading GIF...</h1>\n                </div>\n            );\n        }\n    }\n\n    componentDidMount() {\n        fetchGifById(this.props.match.params.gifId)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        item: result.data,\n                        isLoaded: true,\n                    });\n                },\n                // TODO: handle error\n                () => {}\n            );\n    }\n}\n\nexport default withRouter(GifDetail);\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\ntype ThumbnailListProps = {\n    isLoaded: boolean,\n    items: Array<any>\n}\n\nclass ThumbnailList extends React.Component<ThumbnailListProps, any> {\n\n    render() {\n        if (this.props.isLoaded) {\n            return (\n                    <ul className=\"thumbnail-list\">\n                            {this.props.items.map((item) => \n                                <Link to={`/gif/${item.id}`}>\n                                    <li className=\"thumbnail-item\" key={item.id} onClick={this.viewThumbnail}>\n                                        <img className=\"thumbnail\" \n                                            src={item.images.fixed_height.url} \n                                            width={item.images.fixed_height.width}\n                                            height={item.images.fixed_height.height}\n                                            alt={item.title}\n                                            title={item.title}\n                                        ></img>\n                                    </li>\n                                </Link>\n                            )}\n                    </ul>\n            );\n        } else {\n            return <h1>Loading...</h1>;\n        }\n    }\n\n    viewThumbnail(evt: React.MouseEvent) {\n        console.log(evt);\n    }\n}\n\nexport default ThumbnailList;\n","import React from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { fetchSearch, fetchTrending } from './GiphyApi';\nimport ThumbnailList from './ThumbnailList';\nimport debounce from 'debounce';\n\nconst DEBOUNCE_INTERVAL = 200;\n\ntype GiphyBrowserState = {\n    isLoaded: boolean,\n    items: Array<any>,\n    q: string,\n    page: number,\n    isLastPage: boolean\n}\n\nclass GiphyBrowser extends React.Component<any, GiphyBrowserState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            items: [],\n            q: '',\n            page: 0,\n            isLastPage: false\n        };\n\n        this.qChanged = this.qChanged.bind(this);\n        this.fetchMoreData = this.fetchMoreData.bind(this);\n        this.fetchData = debounce(this.fetchData.bind(this), DEBOUNCE_INTERVAL);\n    }\n\n    render() {\n        return (\n            <div>\n                <input type=\"text\" value={this.state.q} onChange={this.qChanged} className=\"search-box\" placeholder=\"Search for GIFs\">\n                </input>\n                <InfiniteScroll\n                    dataLength={this.state.items.length}\n                    next={this.fetchMoreData}\n                    hasMore={!this.state.isLastPage}\n                    loader={null}\n                >\n                    <ThumbnailList items={this.state.items} isLoaded={this.state.isLoaded}></ThumbnailList>\n                </InfiniteScroll>\n            </div>\n        );\n    }\n\n    qChanged(evt: React.ChangeEvent<HTMLInputElement>) {\n        const q = evt.target.value;\n        this.setState({ q });\n        this.fetchData(q);\n    }\n\n    fetchData(q: string) {\n        let fetchCall;\n\n        if (q.length) {\n            fetchCall = fetchSearch(0, q);\n        } else {\n            fetchCall = fetchTrending(0);\n        }\n\n        fetchCall\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        items: result.data\n                    });\n                },\n                // TODO: handle error\n                () => {}\n            );\n    }\n\n    fetchMoreData() {\n        const { q, page } = this.state;\n\n        let fetchCall;\n\n        if (q.length) {\n            fetchCall = fetchSearch(page + 1, q);\n        } else {\n            fetchCall = fetchTrending(page + 1);\n        }\n\n        fetchCall\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    const { offset, count, total_count } = result.pagination;\n                    this.setState({\n                        isLoaded: true,\n                        items: this.state.items.concat(result.data),\n                        page: page + 1,\n                        isLastPage: offset + count > total_count\n                    });\n                },\n                // TODO: handle error\n                () => {}\n            );\n    }\n\n    componentDidMount() {\n        this.fetchData(this.state.q);\n    }\n}\n\nexport default GiphyBrowser;\n","import './App.css';\nimport React from 'react';\nimport GifDetail from './GifDetail';\nimport GiphyBrowser from './GiphyBrowser';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route component={GiphyBrowser} path=\"/\" exact/>\n        <Route component={GifDetail} path=\"/gif/:gifId\"/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}